generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alumni_profiles {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?        @db.Uuid
  first_name        String?        @db.VarChar(100)
  last_name         String?        @db.VarChar(100)
  nickname          String?        @db.VarChar(50)
  profile_image_url String?
  bio               String?
  graduation_year   Int?
  major             String?        @db.VarChar(100)
  phone             String?        @db.VarChar(20)
  line_id           String?        @db.VarChar(50)
  facebook_url      String?
  linkedin_url      String?
  profile_privacy   privacy_level? @default(alumni_only)
  personal_privacy  privacy_level? @default(alumni_only)
  work_privacy      privacy_level? @default(alumni_only)
  contact_privacy   privacy_level? @default(alumni_only)
  other_privacy     privacy_level? @default(alumni_only)
  created_at        DateTime?      @default(now()) @db.Timestamp(6)
  updated_at        DateTime?      @default(now()) @db.Timestamp(6)
  user              User?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  news_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  news       news?     @relation(fields: [news_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([news_id], map: "idx_comments_news_id")
}

model discussion_categories {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @db.VarChar(100)
  description       String?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  discussion_topics discussion_topics[]
}

model discussion_replies {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic_id          String?            @db.Uuid
  user_id           String?            @db.Uuid
  content           String
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  updated_at        DateTime?          @default(now()) @db.Timestamp(6)
  discussion_topics discussion_topics? @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              User?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([topic_id], map: "idx_discussion_replies_topic")
}

model discussion_topics {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id           String?                @db.Uuid
  user_id               String?                @db.Uuid
  title                 String                 @db.VarChar(255)
  content               String
  pinned                Boolean?               @default(false)
  locked                Boolean?               @default(false)
  created_at            DateTime?              @default(now()) @db.Timestamp(6)
  updated_at            DateTime?              @default(now()) @db.Timestamp(6)
  discussion_replies    discussion_replies[]
  discussion_categories discussion_categories? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                  User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category_id], map: "idx_discussion_topics_category")
}

model news {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String     @db.VarChar(255)
  content    String
  author_id  String?    @db.Uuid
  published  Boolean?   @default(false)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  comments   comments[]
  user       User?      @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([published], map: "idx_news_published")
}

model notification_settings {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?  @db.Uuid
  email_notifications Boolean? @default(true)
  discussion_replies  Boolean? @default(true)
  news_updates        Boolean? @default(true)
  birthday_reminders  Boolean? @default(true)
  user                User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  password_hash         String?
  role                  user_role?              @default(alumni)
  status                user_status?            @default(UNREGISTERED)
  national_id           String?                 @unique
  birth_date            DateTime?
  created_at            DateTime?               @default(now())
  updated_at            DateTime?               @default(now())
  username              String?                 @unique
  accounts              Account[]
  sessions              Session[]
  alumni_profiles       alumni_profiles[]
  comments              comments[]
  discussion_replies    discussion_replies[]
  discussion_topics     discussion_topics[]
  news                  news[]
  notification_settings notification_settings[]
  work_history          work_history[]
}

model Account {
  id                String    @id @default(uuid())
  userId            String    @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime? @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model work_history {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?   @db.Uuid
  company_name String    @db.VarChar(200)
  position     String?   @db.VarChar(100)
  province     String?   @db.VarChar(100)
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  is_current   Boolean?  @default(false)
  description  String?
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  user         User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([province], map: "idx_work_history_province")
  @@index([user_id], map: "idx_work_history_user_id")
}

enum privacy_level {
  public
  alumni_only @map("alumni-only")
  admin_only  @map("admin-only")
}

enum user_role {
  admin
  alumni
}

enum user_status {
  UNREGISTERED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUSPENDED
}
